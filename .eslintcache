[{"/Users/rptasznik/react/graphql-client/src/index.js":"1","/Users/rptasznik/react/graphql-client/src/reportWebVitals.js":"2","/Users/rptasznik/react/graphql-client/src/App.js":"3","/Users/rptasznik/react/graphql-client/src/CustomHooks.js":"4","/Users/rptasznik/react/graphql-client/src/Queries.js":"5","/Users/rptasznik/react/graphql-client/src/CustomersView.js":"6","/Users/rptasznik/react/graphql-client/src/CustomerView.js":"7","/Users/rptasznik/react/graphql-client/src/CustomerForm.js":"8"},{"size":832,"mtime":1609953231104,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1609520894215,"results":"11","hashOfConfig":"10"},{"size":528,"mtime":1609520894212,"results":"12","hashOfConfig":"10"},{"size":475,"mtime":1610027737580,"results":"13","hashOfConfig":"10"},{"size":945,"mtime":1609856146173,"results":"14","hashOfConfig":"10"},{"size":1962,"mtime":1610027677097,"results":"15","hashOfConfig":"10"},{"size":2315,"mtime":1609953199098,"results":"16","hashOfConfig":"10"},{"size":1821,"mtime":1610030487495,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1x5ab2g",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/rptasznik/react/graphql-client/src/index.js",[],["37","38"],"/Users/rptasznik/react/graphql-client/src/reportWebVitals.js",[],"/Users/rptasznik/react/graphql-client/src/App.js",[],["39","40"],"/Users/rptasznik/react/graphql-client/src/CustomHooks.js",[],"/Users/rptasznik/react/graphql-client/src/Queries.js",[],"/Users/rptasznik/react/graphql-client/src/CustomersView.js",[],"/Users/rptasznik/react/graphql-client/src/CustomerView.js",["41","42"],"import React from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport GQLQueries from './Queries'\nimport Modal from 'react-bootstrap/Modal';\nimport useCustomerForm from './CustomHooks';\nimport CustomerForm from './CustomerForm';\n\nfunction CustomerView(props){\n\n  const customerId = props.customer || null;\n\n  const [createCustomer, { created_data }] = useMutation(GQLQueries.CREATE_CUSTOMER, {\n    onCompleted() {\n      props.refreshCustomers();\n    }\n  });\n  \n  const [updateCustomer, {updated_data}] = useMutation(GQLQueries.UPDATE_CUSTOMER, {\n    onCompleted() {\n      props.refreshCustomers();\n    }\n  });  \n\n  // query for our customer  \n  const { loading, error, data } = useQuery(GQLQueries.GET_CUSTOMER, {\n    variables: {id: customerId},\n    skip: customerId == null\n  });\n\n  const saveCustomer = (event) => {   \n    // call our mutations here\n    if (customerId){\n      updateCustomer({ \n        variables: { \n          id: customerId, \n          name: inputs.name || data.customer.name, \n          email: inputs.email || data.customer.email,\n          phone: inputs.phone || data.customer.phone,\n          address: inputs.address || data.customer.address\n        } \n      });\n    } else {\n      createCustomer({ \n        variables: { \n          name: inputs.name, \n          email: inputs.email, \n          phone: inputs.phone, \n          address: inputs.address \n        } \n      });\n    }\n    // hide modal\n    props.onHide();\n  }\n\n  const {inputs, handleInputChange, handleSubmit} = useCustomerForm(saveCustomer);\n  const {refreshCustomers, ...rest} = props;\n\n  let title;\n  if (customerId){\n    title = 'Edit Customer'\n  } else {\n    title = 'Add Customer'\n  }\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error...</p>; \n\n  return (\n    <Modal\n        {...rest}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            {title}\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body> \n          <CustomerForm onHide={props.onHide} inputs={inputs} data={data} handleSubmit={handleSubmit} handleInputChange={handleInputChange} />\n        </Modal.Body>\n      </Modal>\n  );\n}\nexport default CustomerView","/Users/rptasznik/react/graphql-client/src/CustomerForm.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"43","replacedBy":"47"},{"ruleId":"45","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":12,"column":28,"nodeType":"51","messageId":"52","endLine":12,"endColumn":40},{"ruleId":"49","severity":1,"message":"53","line":18,"column":27,"nodeType":"51","messageId":"52","endLine":18,"endColumn":39},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],["54"],["55"],"no-unused-vars","'created_data' is assigned a value but never used.","Identifier","unusedVar","'updated_data' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]